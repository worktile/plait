import { Point } from '@plait/core';
import { getIndexAndDeleteCountByKeyPoint } from './line-resize';

describe('getIndexAndDeleteCountByKeyPoint', () => {
    describe('both the startPoint and endPoint are not on the elbow line segment', () => {
        it('both the startPoint and endPoint is on the same line as the dataPoints', () => {
            /**
             * dataPoints
             * 0 ðŸ”´<------
             *   ï½œ
             *   ï½œ
             * 1 ðŸ”´------------>
             *
             *  nextKeyPoints
             * 1 ðŸŸ¢<----ðŸŸ¢ 0
             *   ï½œ
             * handle
             *   ï½œ
             * 2 ðŸŸ¢----------------->ðŸŸ¢ 3
             *                       ï½œ
             *                       ï½œ
             *                <------ðŸŸ¢ 4
             */
            const dataPoints: Point[] = [
                [1, 1],
                [1, 2]
            ];
            const nextKeyPoints: Point[] = [
                [0, 5],
                [1, 5],
                [1, 7],
                [3, 7],
                [3, 8]
            ];
            const handleIndex = 1;
            const { index, deleteCount } = getIndexAndDeleteCountByKeyPoint(dataPoints, nextKeyPoints, handleIndex);
            expect(index).toBe(0);
            expect(deleteCount).toBe(2);
        });
        it('only the startPoint is on the same line as the dataPoints', () => {
            /**
             * dataPoints
             * 0 ðŸ”´<----
             *   ï½œ
             *   ï½œ
             * 1 ðŸ”´ ---------->
             *
             *  nextKeyPoints
             * 1 ðŸŸ¢<----ðŸŸ¢ 0
             *   ï½œ
             *   ï½œ
             * 2 ðŸŸ¢-----handle------>ðŸŸ¢ 3
             *                       ï½œ
             *                       ï½œ
             *                <------ðŸŸ¢ 4
             */
            const dataPoints: Point[] = [
                [1, 1],
                [1, 2]
            ];
            const nextKeyPoints: Point[] = [
                [0, 5],
                [1, 5],
                [1, 7],
                [3, 7],
                [3, 8]
            ];
            const handleIndex = 2;
            const { index, deleteCount } = getIndexAndDeleteCountByKeyPoint(dataPoints, nextKeyPoints, handleIndex);
            expect(index).toBe(1);
            expect(deleteCount).toBe(1);
        });
        it('only the endPoint is on the same line as the dataPoints', () => {
            /**
             *                      dataPoints
             *              -------->ðŸ”´ 0
             *                       ï½œ
             *                       ï½œ
             *                <------ðŸ”´ 1
             *
             *  nextKeyPoints
             * 1 ðŸŸ¢<----ðŸŸ¢ 0
             *   ï½œ
             *   ï½œ
             * 2 ðŸŸ¢-----handle------>ðŸŸ¢ 3
             *                       ï½œ
             *                       ï½œ
             *                <------ðŸŸ¢ 4
             */
            const dataPoints: Point[] = [
                [3, 1],
                [3, 2]
            ];
            const nextKeyPoints: Point[] = [
                [0, 5],
                [1, 5],
                [1, 7],
                [3, 7],
                [3, 8]
            ];
            const handleIndex = 2;
            const { index, deleteCount } = getIndexAndDeleteCountByKeyPoint(dataPoints, nextKeyPoints, handleIndex);
            expect(index).toBe(0);
            expect(deleteCount).toBe(1);
        });
    });
});
